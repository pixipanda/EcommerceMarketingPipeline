<workflow-app name="Prepare Data" xmlns="uri:oozie:workflow:0.5">
    <start to="add_hive_partitions"/>
    <action name="add_hive_partitions">
        <hive2 xmlns="uri:oozie:hive2-action:0.1">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <jdbc-url>jdbc:hive2://quickstart.cloudera:10000/default</jdbc-url>
            <script>/code/hive/read-hive.hql</script>
            <param>omniture_raw_path=${omniture_raw_path}</param>
            <param>date_ts=${date_ts}</param>
        </hive2>
        <ok to="PrepareOmnitureDataSpark_Shell"/>
        <error to="Kill"/>
    </action>

    <action name="PrepareOmnitureDataSpark_Shell">
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>${jobXml}</job-xml>
            <exec>spark-submit</exec>
            <argument>--master</argument>
            <argument>yarn-client</argument>
            <argument>--class</argument>
            <argument>org.anish.spark.jobs.PrepareOmnitureData</argument>
            <argument>e-commerce-marketing-spark.jar</argument>
            <argument>--date_ts</argument>
            <argument>${date_ts}</argument>
            <file>/code/spark/e-commerce-marketing-spark.jar#e-commerce-marketing-spark.jar</file>
            <file>${jobXml}#hive-site.xml</file>
        </shell>
        <ok to="Cleanup"/>
        <!--Ok to should contain PrepareSalesDataSpark_Shell to run the next action-->
        <error to="Kill"/>
    </action>

    <action name="PrepareSalesDataSpark_Shell">
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>${jobXml}</job-xml>
            <exec>spark-submit</exec>
            <argument>--master</argument>
            <argument>yarn-client</argument>
            <argument>--packages</argument>
            <argument>com.databricks:spark-csv_2.10:1.5.0</argument>
            <argument>--class</argument>
            <argument>org.anish.spark.jobs.PrepareSalesData</argument>
            <argument>e-commerce-marketing-spark.jar</argument>
            <argument>--rawSalesDataSource</argument>
            <argument>${sales_raw_path}</argument>
            <argument>--date_ts</argument>
            <argument>${date_ts}</argument>
            <argument>--topSpendersToAnalyze</argument>
            <argument>${topSpendersToAnalyze}</argument>
            <file>/code/spark/e-commerce-marketing-spark.jar#e-commerce-marketing-spark.jar</file>
            <file>${jobXml}#hive-site.xml</file>
        </shell>
        <ok to="MapSessionSales_Shell"/>
        <error to="Kill"/>
    </action>

    <action name="MapSessionSales_Shell">
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>${jobXml}</job-xml>
            <exec>spark-submit</exec>
            <argument>--master</argument>
            <argument>yarn-client</argument>
            <argument>--packages</argument>
            <argument>com.databricks:spark-csv_2.10:1.5.0</argument>
            <argument>--driver-memory 2g --executor-memory 4g</argument>
            <argument>--conf spark.sql.parquet.compression.codec=snappy</argument>
            <argument>--conf spark.sql.parquet.filterPushdown=true</argument>
            <argument>--conf spark.sql.parquet.mergeSchema=false</argument>
            <argument>--conf spark.sql.parquet.filterPushdown=true</argument>
            <argument>--conf spark.sql.hive.metastorePartitionPruning=true</argument>
            <argument>--class org.anish.spark.jobs.MapSessionSales</argument>
            <argument>e-commerce-marketing-spark.jar</argument>
            <argument>--date_ts</argument>
            <argument>${date_ts}</argument>
            <file>/code/spark/e-commerce-marketing-spark.jar#e-commerce-marketing-spark.jar</file>
            <file>${jobXml}#hive-site.xml</file>
        </shell>
        <ok to="DailyTopSpenders_Shell"/>
        <error to="Kill"/>
    </action>
    <action name="DailyTopSpenders_Shell">
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>${jobXml}</job-xml>
            <exec>spark-submit</exec>
            <argument>--master</argument>
            <argument>yarn-client</argument>
            <argument>--packages</argument>
            <argument>com.databricks:spark-csv_2.10:1.5.0</argument>
            <argument>--conf spark.sql.parquet.compression.codec=snappy</argument>
            <argument>--conf spark.sql.parquet.filterPushdown=true</argument>
            <argument>--conf spark.sql.parquet.mergeSchema=false</argument>
            <argument>--conf spark.sql.parquet.filterPushdown=true</argument>
            <argument>--conf spark.sql.hive.metastorePartitionPruning=true</argument>
            <argument>--class org.anish.spark.jobs.DailyTopSpenders</argument>
            <argument>e-commerce-marketing-spark.jar</argument>
            <argument>--date_ts</argument>
            <argument>${date_ts}</argument>
            <argument>--topSpendersToAnalyze</argument>
            <argument>${topSpendersToAnalyze}</argument>
            <file>/code/spark/e-commerce-marketing-spark.jar#e-commerce-marketing-spark.jar</file>
            <file>${jobXml}#hive-site.xml</file>
        </shell>
        <ok to="Cleanup"/>
        <error to="Kill"/>
    </action>


    <!--Example Spark Action - This is the ideal way of calling a Spark Job from Oozie-->
    <action name="PrepareOmnitureDataSpark">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <job-xml>${jobXml}</job-xml>
            <master>yarn</master>
            <mode>client</mode>
            <name>PrepareOmnitureData</name>
            <class>org.anish.spark.jobs.PrepareOmnitureData</class>
            <jar>e-commerce-marketing-spark.jar</jar>
            <arg>--date_ts</arg>
            <arg>${date_ts}</arg>
            <file>/code/spark/e-commerce-marketing-spark.jar#e-commerce-marketing-spark.jar</file>
            <file>${jobXml}#hive-site.xml</file>
        </spark>
        <ok to="Cleanup"/>
        <error to="Kill"/>
    </action>

    <!--Clean up the success files at input to mark input is ingested-->
    <!--This is because the IngestData.sh shell script doesn't load more data if previous hours data has not been processed yet-->
    <action name="Cleanup">
        <fs>
            <delete path='${nameNode}/${sales_raw_path}/_SUCCESS'/>
            <delete path='${nameNode}/${omniture_raw_path}/_SUCCESS'/>
            <delete path='${nameNode}/${baseFsURI}/_SUCCESS'/>
        </fs>
        <ok to="End"/>
        <error to="End"/> <!-- Probably it was already deleted. - Other error can be permission issues / name node in safe mode, but for demo we can ignore this failure.-->
    </action>

    <kill name="Kill">
        <message>Action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="End"/>
</workflow-app>

